#!/usr/bin/env python3

from blockmessage.ecies import EC_KEY
from blockmessage.rsa import RSA_SYS
from blockmessage.tx_message import MessagingTx
import argparse, time, sys, binascii, json

# Zrelay message version 1 is as follows (JSON)
# { "zrelay": {"version": 1, "id":"<string>", "destzaddr":"<z_addr>", "amount":<float>, "acktaddr":"<t_addr>", "donation":<float>, "memo":"<string>"} }
#
# Fee is calculated from amounts difference. Fee must be two or three times the single fee:
#  if acktaddr present, three transactions are required so total_fee=fee*3
#  if acktaddr not present, total_fee=fee*2 (one for shielding and other for the actual z-tx)

VERSION = 1
MAX_WAIT_Z_OP = 50 # *5seconds

def parse_args():
    parser = argparse.ArgumentParser(description='Z transaction relay node')
    parser.add_argument(
            '--host',
            dest='rpc_host',
            type=str,
            default="127.0.0.1",
            help='RPC host to connect')
    parser.add_argument(
            '--port',
            dest='rpc_port',
            type=int,
            default=None,
            help='RPC port to connect')
    parser.add_argument(
            '--auth',
            dest='rpc_auth',
            type=str,
            default=None,
            help='RPC authentication params (username:password)')
    parser.add_argument(
            '-l',
            dest='loop',
            action="store_true",
            help='Enable loop/daemon mode. Read forever for relay messages')
    parser.add_argument(
            '--encrypt',
            dest='encrypt',
            type=str,
            default="RSA",
            help='Choose encryption algorithm, RSA by default')
    parser.add_argument(
            '-k',
            dest='print_keys',
            action="store_true",
            help='Print wallet keys and exit')
    parser.add_argument(
            '-i',
            dest='keysfile',
            type=str,
            default=None,
            help='File containing own keys (generated with -k)')
    return parser.parse_args()

def print_and_exit(msg):
    print(msg)
    sys.exit(1)

def str_to_hex(memo):
    return binascii.hexlify(memo.encode('utf-8')).decode('utf-8')


def get_rpc(port, host="127.0.0.1", user=None, passw=None):
    if user and passw:
        mtx = MessagingTx(host, port, user=user, passw=passw)
    else:
        mtx = MessagingTx(host, port)
    return mtx

def get_keys(keysfile):
    try:
        with open(keysfile, 'r') as kf:
            raw_keys = kf.read()
        keys = eval(raw_keys)
        privkey = keys['private_key']
        pubkey = keys['public_key']
        address = keys['address']
    except:
        print_and_exit("Wrong keyfile")
    return privkey, pubkey, address

def get_ec(privkey):
    pk = EC_KEY.deserialize_privkey(privkey)[1]
    return EC_KEY(pk)

def get_messages(mtx, encrypt, privkey, pubkey, ec, debug=False):
    raw_messages = mtx.get_messages(unspent=True)
    messages = []
    for m in raw_messages:
        try:
            if encrypt=="ECIES":
                ec = get_ec(privkey)
                jmsg = json.loads(ec.decrypt_message(m['message']).decode('utf-8'))
            elif encrypt=="RSA":
                filePrivKey = open(privkey, "r")
                privK = filePrivKey.read()
                jmsg = json.loads(RSA_SYS.decrypt_message(privK, m['message'].decode('utf-8')))
            else:
                jmsg = json.loads(m['message'].decode('utf-8'))

            tx = m['tx']
            if jmsg['zrelay']['version'] == VERSION:
                if mtx.rpc.call("z_validateaddress", jmsg['zrelay']['destzaddr'])['isvalid']:
                    if not tx['txid']:
                        print("Transaction ID not found")
                    else:
                        if not 'acktaddr' in jmsg['zrelay'].keys(): jmsg['zrelay']['acktaddr'] = None
                        if not 'id' in jmsg['zrelay'].keys(): jmsg['zrelay']['id'] = None
                        if not 'amount' in jmsg['zrelay'].keys(): jmsg['zrelay']['amount'] = 0.0
                        if not 'donation' in jmsg['zrelay'].keys(): jmsg['zrelay']['donation'] = 0.0
                        if not 'memo' in jmsg['zrelay'].keys(): jmsg['zrelay']['memo'] = None
                        messages.append({'msg':jmsg['zrelay'], 'tx': tx})
                else:
                    print("Invalid destination Z address %s" %jmsg['zrelay']['destzaddr'])
        except binascii.Error as e:
            if debug: print("Got padding error %s" %e)
        except Exception as e:
            if debug: print("Got exception %s" %e)
    return messages

def shield(mtx, tx, amount, fee):
    z_addr = mtx.rpc.call('z_getnewaddress')
    print(" shield addr\t%s" %z_addr)
    print(" shield amount\t%.8f/%.8f" %(amount, fee))
    z_oid = mtx.rpc.call("z_sendmany", tx['address'], [{"address":z_addr,"amount":amount}], 1, fee)
    return {'z_address':z_addr, 'oid':z_oid}

def z_send(mtx, afrom, zto, amount, fee, memo=None):
    balance = float(mtx.rpc.call('z_getbalance', afrom))
    if balance < float(amount + fee):
        return False
    destination = [{"address":zto,"amount":amount}]
    if memo:
        destination[0]["memo"] = str_to_hex(memo)
    return mtx.rpc.call("z_sendmany", afrom, destination, 1, fee)

def z_check_oid(mtx, oid):
    status = mtx.rpc.call('z_getoperationstatus',[oid])
    try:
        txid = status[0]['result']['txid']
    except:
        txid = None
    return status[0]['status'], txid

def send_ack(mtx, addr, id, fee):
    msg = '{\"zrelay\": {\"version\": 1, \"id\":\"%s\",\"result\":\"1\" } }' %(id)
    mtx.send_message(addr, msg, 0.0, fee)

def wait_tx(mtx, txid, max=60):
    nconf = 0
    while nconf <= 0 and max > 0:
        nconf = mtx.rpc.call('gettransaction', txid)['confirmations']
        max -= 1
        time.sleep(1)
    return nconf > 0

def proc_messages(messages):
    for m in messages:
        print("-> Processing new message")
        ack_addr = m['msg']['acktaddr']
        ack_addr = None # Does not work cause vout=0 is not accepted
        donation = m['msg']['donation']
        dst_z_addr = m['msg']['destzaddr']
        dst_amount = round(m['msg']['amount'], 8)
        tx_amount = m['tx']['amount']
        my_addr = m['tx']['address']
        msg_id = m['msg']['id']
        memo = m['msg']['memo']

        if ack_addr:
            fee = round((tx_amount - dst_amount - donation)/2, 8)
        else:
            fee = round((tx_amount - dst_amount - donation), 8)

        if fee < 0.00000001:
            print("Not enough funds sent by the originator")
            continue

        print(" message id\t%s" %(msg_id))
        print(" destination\t%s" %(dst_z_addr))
        print(" acknowledge\t%s" %(ack_addr))
        print(" send amount\t%.8f" %(dst_amount))
        print(" txn fee\t%.8f" %(fee))
        print(" memo   \t%s" %(memo))

        #print("-> Shielding TX funds")
        #zshield = shield(mtx, m['tx'], dst_amount, fee)
        #result = z_send(mtx, zshield['z_address'], m['msg']['destzaddr'], dst_amount, fee)

        print("-> Sending %f to %s" %(dst_amount, dst_z_addr))
        z_oid = z_send(mtx, my_addr, dst_z_addr, dst_amount, fee, memo=memo)

        print(" waiting for %s" %(z_oid))
        for i in range(MAX_WAIT_Z_OP):
            result, result_txid = z_check_oid(mtx, z_oid)
            if result == "queued" or result == "executing":
                print(".", end="", flush=True)
            elif result == "success":
                print(" successful")
                print(" txID %s" %result_txid)
                if ack_addr:
                    print("-> Sending ACK to %s" %ack_addr)
                    print(" waiting for TX to be confirmed (%s)" %result_txid)
                    if wait_tx(mtx, result_txid):
                        print(send_ack(mtx, ack_addr, msg_id, fee))
                    else:
                        print(" error sending ACK")
                break
            elif result == "failed":
                print(" failed! check log for details")
            else:
                print(" unknown status %s" %result)
            time.sleep(5)

args = parse_args()

if not args.rpc_port:
    print_and_exit("RPC port must be specified")

if args.rpc_auth:
    try:
        user = args.rpc_auth.split(':')[0]
        passw = args.rpc_auth.split(':')[1]
    except:
        print_and_exit('Wrong RPC auth syntax, use --auth=user:password')
    mtx = get_rpc(args.rpc_port, host=args.rpc_host, user=user, passw=passw)

max_wait = 10
while not mtx.is_rpc_ready():
    time.sleep(1)
    max_wait -= 1
    if max_wait <= 0:
        print_and_exit("Cannot connect to RPC after %d seconds" %max_wait)

if args.print_keys:
    print(mtx.get_wallet())
    sys.exit(0)

if args.keysfile:
    try:
        with open(args.keysfile, 'r') as kf:
            raw_keys = kf.read()
        keys = eval(raw_keys)
        privkey = keys['private_key']
        pubkey = keys['public_key']
        address = keys['address']
    except:
        print_and_exit("Wrong keyfile")
else:
    print_and_exit("Keyfile must be specified. You might generate it using -k option.")

print("My address: %s\nMy pubkey:%s\n" %(address,pubkey))

if args.loop:
    while True:
        proc_messages(get_messages(mtx, args.encrypt, privkey, pubkey, debug=False))
        time.sleep(10)
else:
    proc_messages(get_messages(mtx, args.encrypt, privkey, pubkey, debug=False))
